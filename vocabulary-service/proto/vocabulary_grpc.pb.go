// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/vocabulary.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VocabularyService_GetVocabularies_FullMethodName    = "/vocabulary.VocabularyService/GetVocabularies"
	VocabularyService_CreateVocabulary_FullMethodName   = "/vocabulary.VocabularyService/CreateVocabulary"
	VocabularyService_UpdateVocabulary_FullMethodName   = "/vocabulary.VocabularyService/UpdateVocabulary"
	VocabularyService_DeleteVocabulary_FullMethodName   = "/vocabulary.VocabularyService/DeleteVocabulary"
	VocabularyService_GetVocabularyById_FullMethodName  = "/vocabulary.VocabularyService/GetVocabularyById"
	VocabularyService_GetVocabularyStats_FullMethodName = "/vocabulary.VocabularyService/GetVocabularyStats"
)

// VocabularyServiceClient is the client API for VocabularyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Vocabulary service definition
type VocabularyServiceClient interface {
	// Get vocabularies with optional filtering
	GetVocabularies(ctx context.Context, in *GetVocabulariesRequest, opts ...grpc.CallOption) (*GetVocabulariesResponse, error)
	// Create a new vocabulary entry
	CreateVocabulary(ctx context.Context, in *CreateVocabularyRequest, opts ...grpc.CallOption) (*VocabularyResponse, error)
	// Update an existing vocabulary entry
	UpdateVocabulary(ctx context.Context, in *UpdateVocabularyRequest, opts ...grpc.CallOption) (*VocabularyResponse, error)
	// Delete a vocabulary entry
	DeleteVocabulary(ctx context.Context, in *DeleteVocabularyRequest, opts ...grpc.CallOption) (*DeleteVocabularyResponse, error)
	// Get vocabulary by ID
	GetVocabularyById(ctx context.Context, in *GetVocabularyByIdRequest, opts ...grpc.CallOption) (*VocabularyResponse, error)
	// Get vocabulary statistics
	GetVocabularyStats(ctx context.Context, in *GetVocabularyStatsRequest, opts ...grpc.CallOption) (*VocabularyStatsResponse, error)
}

type vocabularyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocabularyServiceClient(cc grpc.ClientConnInterface) VocabularyServiceClient {
	return &vocabularyServiceClient{cc}
}

func (c *vocabularyServiceClient) GetVocabularies(ctx context.Context, in *GetVocabulariesRequest, opts ...grpc.CallOption) (*GetVocabulariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVocabulariesResponse)
	err := c.cc.Invoke(ctx, VocabularyService_GetVocabularies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) CreateVocabulary(ctx context.Context, in *CreateVocabularyRequest, opts ...grpc.CallOption) (*VocabularyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyResponse)
	err := c.cc.Invoke(ctx, VocabularyService_CreateVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) UpdateVocabulary(ctx context.Context, in *UpdateVocabularyRequest, opts ...grpc.CallOption) (*VocabularyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyResponse)
	err := c.cc.Invoke(ctx, VocabularyService_UpdateVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) DeleteVocabulary(ctx context.Context, in *DeleteVocabularyRequest, opts ...grpc.CallOption) (*DeleteVocabularyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVocabularyResponse)
	err := c.cc.Invoke(ctx, VocabularyService_DeleteVocabulary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) GetVocabularyById(ctx context.Context, in *GetVocabularyByIdRequest, opts ...grpc.CallOption) (*VocabularyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyResponse)
	err := c.cc.Invoke(ctx, VocabularyService_GetVocabularyById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) GetVocabularyStats(ctx context.Context, in *GetVocabularyStatsRequest, opts ...grpc.CallOption) (*VocabularyStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyStatsResponse)
	err := c.cc.Invoke(ctx, VocabularyService_GetVocabularyStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VocabularyServiceServer is the server API for VocabularyService service.
// All implementations must embed UnimplementedVocabularyServiceServer
// for forward compatibility.
//
// Vocabulary service definition
type VocabularyServiceServer interface {
	// Get vocabularies with optional filtering
	GetVocabularies(context.Context, *GetVocabulariesRequest) (*GetVocabulariesResponse, error)
	// Create a new vocabulary entry
	CreateVocabulary(context.Context, *CreateVocabularyRequest) (*VocabularyResponse, error)
	// Update an existing vocabulary entry
	UpdateVocabulary(context.Context, *UpdateVocabularyRequest) (*VocabularyResponse, error)
	// Delete a vocabulary entry
	DeleteVocabulary(context.Context, *DeleteVocabularyRequest) (*DeleteVocabularyResponse, error)
	// Get vocabulary by ID
	GetVocabularyById(context.Context, *GetVocabularyByIdRequest) (*VocabularyResponse, error)
	// Get vocabulary statistics
	GetVocabularyStats(context.Context, *GetVocabularyStatsRequest) (*VocabularyStatsResponse, error)
	mustEmbedUnimplementedVocabularyServiceServer()
}

// UnimplementedVocabularyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVocabularyServiceServer struct{}

func (UnimplementedVocabularyServiceServer) GetVocabularies(context.Context, *GetVocabulariesRequest) (*GetVocabulariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabularies not implemented")
}
func (UnimplementedVocabularyServiceServer) CreateVocabulary(context.Context, *CreateVocabularyRequest) (*VocabularyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVocabulary not implemented")
}
func (UnimplementedVocabularyServiceServer) UpdateVocabulary(context.Context, *UpdateVocabularyRequest) (*VocabularyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVocabulary not implemented")
}
func (UnimplementedVocabularyServiceServer) DeleteVocabulary(context.Context, *DeleteVocabularyRequest) (*DeleteVocabularyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVocabulary not implemented")
}
func (UnimplementedVocabularyServiceServer) GetVocabularyById(context.Context, *GetVocabularyByIdRequest) (*VocabularyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabularyById not implemented")
}
func (UnimplementedVocabularyServiceServer) GetVocabularyStats(context.Context, *GetVocabularyStatsRequest) (*VocabularyStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVocabularyStats not implemented")
}
func (UnimplementedVocabularyServiceServer) mustEmbedUnimplementedVocabularyServiceServer() {}
func (UnimplementedVocabularyServiceServer) testEmbeddedByValue()                           {}

// UnsafeVocabularyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocabularyServiceServer will
// result in compilation errors.
type UnsafeVocabularyServiceServer interface {
	mustEmbedUnimplementedVocabularyServiceServer()
}

func RegisterVocabularyServiceServer(s grpc.ServiceRegistrar, srv VocabularyServiceServer) {
	// If the following call pancis, it indicates UnimplementedVocabularyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VocabularyService_ServiceDesc, srv)
}

func _VocabularyService_GetVocabularies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocabulariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetVocabularies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_GetVocabularies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetVocabularies(ctx, req.(*GetVocabulariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_CreateVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVocabularyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).CreateVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_CreateVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).CreateVocabulary(ctx, req.(*CreateVocabularyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_UpdateVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVocabularyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).UpdateVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_UpdateVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).UpdateVocabulary(ctx, req.(*UpdateVocabularyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_DeleteVocabulary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVocabularyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).DeleteVocabulary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_DeleteVocabulary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).DeleteVocabulary(ctx, req.(*DeleteVocabularyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_GetVocabularyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocabularyByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetVocabularyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_GetVocabularyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetVocabularyById(ctx, req.(*GetVocabularyByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_GetVocabularyStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVocabularyStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetVocabularyStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_GetVocabularyStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetVocabularyStats(ctx, req.(*GetVocabularyStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VocabularyService_ServiceDesc is the grpc.ServiceDesc for VocabularyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocabularyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vocabulary.VocabularyService",
	HandlerType: (*VocabularyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVocabularies",
			Handler:    _VocabularyService_GetVocabularies_Handler,
		},
		{
			MethodName: "CreateVocabulary",
			Handler:    _VocabularyService_CreateVocabulary_Handler,
		},
		{
			MethodName: "UpdateVocabulary",
			Handler:    _VocabularyService_UpdateVocabulary_Handler,
		},
		{
			MethodName: "DeleteVocabulary",
			Handler:    _VocabularyService_DeleteVocabulary_Handler,
		},
		{
			MethodName: "GetVocabularyById",
			Handler:    _VocabularyService_GetVocabularyById_Handler,
		},
		{
			MethodName: "GetVocabularyStats",
			Handler:    _VocabularyService_GetVocabularyStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vocabulary.proto",
}
