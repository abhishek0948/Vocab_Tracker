// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.12.4
// source: proto/vocabulary.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request messages
type GetVocabulariesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Date          string                 `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`      // Optional: filter by date (YYYY-MM-DD)
	Search        string                 `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`  // Optional: search term
	Limit         int32                  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`   // Optional: limit results
	Offset        int32                  `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"` // Optional: pagination offset
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVocabulariesRequest) Reset() {
	*x = GetVocabulariesRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVocabulariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabulariesRequest) ProtoMessage() {}

func (x *GetVocabulariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabulariesRequest.ProtoReflect.Descriptor instead.
func (*GetVocabulariesRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{0}
}

func (x *GetVocabulariesRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetVocabulariesRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetVocabulariesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *GetVocabulariesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVocabulariesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CreateVocabularyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Word          string                 `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Meaning       string                 `protobuf:"bytes,3,opt,name=meaning,proto3" json:"meaning,omitempty"`
	Example       string                 `protobuf:"bytes,4,opt,name=example,proto3" json:"example,omitempty"`
	Date          string                 `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`     // YYYY-MM-DD format
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"` // Optional: defaults to "review_needed"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVocabularyRequest) Reset() {
	*x = CreateVocabularyRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVocabularyRequest) ProtoMessage() {}

func (x *CreateVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVocabularyRequest.ProtoReflect.Descriptor instead.
func (*CreateVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVocabularyRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateVocabularyRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *CreateVocabularyRequest) GetMeaning() string {
	if x != nil {
		return x.Meaning
	}
	return ""
}

func (x *CreateVocabularyRequest) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *CreateVocabularyRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *CreateVocabularyRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateVocabularyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VocabularyId  uint32                 `protobuf:"varint,1,opt,name=vocabulary_id,json=vocabularyId,proto3" json:"vocabulary_id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Word          string                 `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Meaning       string                 `protobuf:"bytes,4,opt,name=meaning,proto3" json:"meaning,omitempty"`
	Example       string                 `protobuf:"bytes,5,opt,name=example,proto3" json:"example,omitempty"`
	Status        string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVocabularyRequest) Reset() {
	*x = UpdateVocabularyRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVocabularyRequest) ProtoMessage() {}

func (x *UpdateVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVocabularyRequest.ProtoReflect.Descriptor instead.
func (*UpdateVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateVocabularyRequest) GetVocabularyId() uint32 {
	if x != nil {
		return x.VocabularyId
	}
	return 0
}

func (x *UpdateVocabularyRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpdateVocabularyRequest) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *UpdateVocabularyRequest) GetMeaning() string {
	if x != nil {
		return x.Meaning
	}
	return ""
}

func (x *UpdateVocabularyRequest) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *UpdateVocabularyRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type DeleteVocabularyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VocabularyId  uint32                 `protobuf:"varint,1,opt,name=vocabulary_id,json=vocabularyId,proto3" json:"vocabulary_id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVocabularyRequest) Reset() {
	*x = DeleteVocabularyRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabularyRequest) ProtoMessage() {}

func (x *DeleteVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabularyRequest.ProtoReflect.Descriptor instead.
func (*DeleteVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteVocabularyRequest) GetVocabularyId() uint32 {
	if x != nil {
		return x.VocabularyId
	}
	return 0
}

func (x *DeleteVocabularyRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetVocabularyByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	VocabularyId  uint32                 `protobuf:"varint,1,opt,name=vocabulary_id,json=vocabularyId,proto3" json:"vocabulary_id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVocabularyByIdRequest) Reset() {
	*x = GetVocabularyByIdRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVocabularyByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyByIdRequest) ProtoMessage() {}

func (x *GetVocabularyByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyByIdRequest.ProtoReflect.Descriptor instead.
func (*GetVocabularyByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{4}
}

func (x *GetVocabularyByIdRequest) GetVocabularyId() uint32 {
	if x != nil {
		return x.VocabularyId
	}
	return 0
}

func (x *GetVocabularyByIdRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetVocabularyStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        uint32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DateFrom      string                 `protobuf:"bytes,2,opt,name=date_from,json=dateFrom,proto3" json:"date_from,omitempty"` // Optional: start date for stats
	DateTo        string                 `protobuf:"bytes,3,opt,name=date_to,json=dateTo,proto3" json:"date_to,omitempty"`       // Optional: end date for stats
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVocabularyStatsRequest) Reset() {
	*x = GetVocabularyStatsRequest{}
	mi := &file_proto_vocabulary_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVocabularyStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyStatsRequest) ProtoMessage() {}

func (x *GetVocabularyStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyStatsRequest.ProtoReflect.Descriptor instead.
func (*GetVocabularyStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{5}
}

func (x *GetVocabularyStatsRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetVocabularyStatsRequest) GetDateFrom() string {
	if x != nil {
		return x.DateFrom
	}
	return ""
}

func (x *GetVocabularyStatsRequest) GetDateTo() string {
	if x != nil {
		return x.DateTo
	}
	return ""
}

// Response messages
type GetVocabulariesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Vocabularies  []*Vocabulary          `protobuf:"bytes,3,rep,name=vocabularies,proto3" json:"vocabularies,omitempty"`
	Count         int32                  `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Total         int32                  `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"` // Total count (for pagination)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVocabulariesResponse) Reset() {
	*x = GetVocabulariesResponse{}
	mi := &file_proto_vocabulary_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVocabulariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabulariesResponse) ProtoMessage() {}

func (x *GetVocabulariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabulariesResponse.ProtoReflect.Descriptor instead.
func (*GetVocabulariesResponse) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{6}
}

func (x *GetVocabulariesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetVocabulariesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetVocabulariesResponse) GetVocabularies() []*Vocabulary {
	if x != nil {
		return x.Vocabularies
	}
	return nil
}

func (x *GetVocabulariesResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetVocabulariesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type VocabularyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Vocabulary    *Vocabulary            `protobuf:"bytes,3,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VocabularyResponse) Reset() {
	*x = VocabularyResponse{}
	mi := &file_proto_vocabulary_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocabularyResponse) ProtoMessage() {}

func (x *VocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocabularyResponse.ProtoReflect.Descriptor instead.
func (*VocabularyResponse) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{7}
}

func (x *VocabularyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VocabularyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VocabularyResponse) GetVocabulary() *Vocabulary {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

type DeleteVocabularyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVocabularyResponse) Reset() {
	*x = DeleteVocabularyResponse{}
	mi := &file_proto_vocabulary_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVocabularyResponse) ProtoMessage() {}

func (x *DeleteVocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVocabularyResponse.ProtoReflect.Descriptor instead.
func (*DeleteVocabularyResponse) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteVocabularyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteVocabularyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type VocabularyStatsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Success        bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message        string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	TotalWords     int32                  `protobuf:"varint,3,opt,name=total_words,json=totalWords,proto3" json:"total_words,omitempty"`
	WordsThisWeek  int32                  `protobuf:"varint,4,opt,name=words_this_week,json=wordsThisWeek,proto3" json:"words_this_week,omitempty"`
	WordsThisMonth int32                  `protobuf:"varint,5,opt,name=words_this_month,json=wordsThisMonth,proto3" json:"words_this_month,omitempty"`
	StatusCounts   map[string]int32       `protobuf:"bytes,6,rep,name=status_counts,json=statusCounts,proto3" json:"status_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // Count by status
	DailyCounts    []*DailyCount          `protobuf:"bytes,7,rep,name=daily_counts,json=dailyCounts,proto3" json:"daily_counts,omitempty"`                                                                               // Daily word counts
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VocabularyStatsResponse) Reset() {
	*x = VocabularyStatsResponse{}
	mi := &file_proto_vocabulary_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VocabularyStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocabularyStatsResponse) ProtoMessage() {}

func (x *VocabularyStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocabularyStatsResponse.ProtoReflect.Descriptor instead.
func (*VocabularyStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{9}
}

func (x *VocabularyStatsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *VocabularyStatsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *VocabularyStatsResponse) GetTotalWords() int32 {
	if x != nil {
		return x.TotalWords
	}
	return 0
}

func (x *VocabularyStatsResponse) GetWordsThisWeek() int32 {
	if x != nil {
		return x.WordsThisWeek
	}
	return 0
}

func (x *VocabularyStatsResponse) GetWordsThisMonth() int32 {
	if x != nil {
		return x.WordsThisMonth
	}
	return 0
}

func (x *VocabularyStatsResponse) GetStatusCounts() map[string]int32 {
	if x != nil {
		return x.StatusCounts
	}
	return nil
}

func (x *VocabularyStatsResponse) GetDailyCounts() []*DailyCount {
	if x != nil {
		return x.DailyCounts
	}
	return nil
}

// Data models
type Vocabulary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Word          string                 `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Meaning       string                 `protobuf:"bytes,4,opt,name=meaning,proto3" json:"meaning,omitempty"`
	Example       string                 `protobuf:"bytes,5,opt,name=example,proto3" json:"example,omitempty"`
	Date          string                 `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`                            // YYYY-MM-DD format
	Status        string                 `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                        // "review_needed", "learned", "mastered"
	CreatedAt     string                 `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // RFC3339 format
	UpdatedAt     string                 `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // RFC3339 format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vocabulary) Reset() {
	*x = Vocabulary{}
	mi := &file_proto_vocabulary_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vocabulary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vocabulary) ProtoMessage() {}

func (x *Vocabulary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vocabulary.ProtoReflect.Descriptor instead.
func (*Vocabulary) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{10}
}

func (x *Vocabulary) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vocabulary) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Vocabulary) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Vocabulary) GetMeaning() string {
	if x != nil {
		return x.Meaning
	}
	return ""
}

func (x *Vocabulary) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *Vocabulary) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *Vocabulary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Vocabulary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Vocabulary) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type DailyCount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          string                 `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"` // YYYY-MM-DD format
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DailyCount) Reset() {
	*x = DailyCount{}
	mi := &file_proto_vocabulary_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DailyCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyCount) ProtoMessage() {}

func (x *DailyCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_vocabulary_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyCount.ProtoReflect.Descriptor instead.
func (*DailyCount) Descriptor() ([]byte, []int) {
	return file_proto_vocabulary_proto_rawDescGZIP(), []int{11}
}

func (x *DailyCount) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailyCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_proto_vocabulary_proto protoreflect.FileDescriptor

const file_proto_vocabulary_proto_rawDesc = "" +
	"\n" +
	"\x16proto/vocabulary.proto\x12\n" +
	"vocabulary\"\x8b\x01\n" +
	"\x16GetVocabulariesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\x12\x12\n" +
	"\x04date\x18\x02 \x01(\tR\x04date\x12\x16\n" +
	"\x06search\x18\x03 \x01(\tR\x06search\x12\x14\n" +
	"\x05limit\x18\x04 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x05 \x01(\x05R\x06offset\"\xa6\x01\n" +
	"\x17CreateVocabularyRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\x12\x12\n" +
	"\x04word\x18\x02 \x01(\tR\x04word\x12\x18\n" +
	"\ameaning\x18\x03 \x01(\tR\ameaning\x12\x18\n" +
	"\aexample\x18\x04 \x01(\tR\aexample\x12\x12\n" +
	"\x04date\x18\x05 \x01(\tR\x04date\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\"\xb7\x01\n" +
	"\x17UpdateVocabularyRequest\x12#\n" +
	"\rvocabulary_id\x18\x01 \x01(\rR\fvocabularyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\rR\x06userId\x12\x12\n" +
	"\x04word\x18\x03 \x01(\tR\x04word\x12\x18\n" +
	"\ameaning\x18\x04 \x01(\tR\ameaning\x12\x18\n" +
	"\aexample\x18\x05 \x01(\tR\aexample\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\"W\n" +
	"\x17DeleteVocabularyRequest\x12#\n" +
	"\rvocabulary_id\x18\x01 \x01(\rR\fvocabularyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\rR\x06userId\"X\n" +
	"\x18GetVocabularyByIdRequest\x12#\n" +
	"\rvocabulary_id\x18\x01 \x01(\rR\fvocabularyId\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\rR\x06userId\"j\n" +
	"\x19GetVocabularyStatsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\rR\x06userId\x12\x1b\n" +
	"\tdate_from\x18\x02 \x01(\tR\bdateFrom\x12\x17\n" +
	"\adate_to\x18\x03 \x01(\tR\x06dateTo\"\xb5\x01\n" +
	"\x17GetVocabulariesResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12:\n" +
	"\fvocabularies\x18\x03 \x03(\v2\x16.vocabulary.VocabularyR\fvocabularies\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x05R\x05count\x12\x14\n" +
	"\x05total\x18\x05 \x01(\x05R\x05total\"\x80\x01\n" +
	"\x12VocabularyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x126\n" +
	"\n" +
	"vocabulary\x18\x03 \x01(\v2\x16.vocabulary.VocabularyR\n" +
	"vocabulary\"N\n" +
	"\x18DeleteVocabularyResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x98\x03\n" +
	"\x17VocabularyStatsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1f\n" +
	"\vtotal_words\x18\x03 \x01(\x05R\n" +
	"totalWords\x12&\n" +
	"\x0fwords_this_week\x18\x04 \x01(\x05R\rwordsThisWeek\x12(\n" +
	"\x10words_this_month\x18\x05 \x01(\x05R\x0ewordsThisMonth\x12Z\n" +
	"\rstatus_counts\x18\x06 \x03(\v25.vocabulary.VocabularyStatsResponse.StatusCountsEntryR\fstatusCounts\x129\n" +
	"\fdaily_counts\x18\a \x03(\v2\x16.vocabulary.DailyCountR\vdailyCounts\x1a?\n" +
	"\x11StatusCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xe7\x01\n" +
	"\n" +
	"Vocabulary\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\rR\x06userId\x12\x12\n" +
	"\x04word\x18\x03 \x01(\tR\x04word\x12\x18\n" +
	"\ameaning\x18\x04 \x01(\tR\ameaning\x12\x18\n" +
	"\aexample\x18\x05 \x01(\tR\aexample\x12\x12\n" +
	"\x04date\x18\x06 \x01(\tR\x04date\x12\x16\n" +
	"\x06status\x18\a \x01(\tR\x06status\x12\x1d\n" +
	"\n" +
	"created_at\x18\b \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\t \x01(\tR\tupdatedAt\"6\n" +
	"\n" +
	"DailyCount\x12\x12\n" +
	"\x04date\x18\x01 \x01(\tR\x04date\x12\x14\n" +
	"\x05count\x18\x02 \x01(\x05R\x05count2\xbd\x04\n" +
	"\x11VocabularyService\x12Z\n" +
	"\x0fGetVocabularies\x12\".vocabulary.GetVocabulariesRequest\x1a#.vocabulary.GetVocabulariesResponse\x12W\n" +
	"\x10CreateVocabulary\x12#.vocabulary.CreateVocabularyRequest\x1a\x1e.vocabulary.VocabularyResponse\x12W\n" +
	"\x10UpdateVocabulary\x12#.vocabulary.UpdateVocabularyRequest\x1a\x1e.vocabulary.VocabularyResponse\x12]\n" +
	"\x10DeleteVocabulary\x12#.vocabulary.DeleteVocabularyRequest\x1a$.vocabulary.DeleteVocabularyResponse\x12Y\n" +
	"\x11GetVocabularyById\x12$.vocabulary.GetVocabularyByIdRequest\x1a\x1e.vocabulary.VocabularyResponse\x12`\n" +
	"\x12GetVocabularyStats\x12%.vocabulary.GetVocabularyStatsRequest\x1a#.vocabulary.VocabularyStatsResponseB3Z1github.com/vocal-tracker/vocabulary-service/protob\x06proto3"

var (
	file_proto_vocabulary_proto_rawDescOnce sync.Once
	file_proto_vocabulary_proto_rawDescData []byte
)

func file_proto_vocabulary_proto_rawDescGZIP() []byte {
	file_proto_vocabulary_proto_rawDescOnce.Do(func() {
		file_proto_vocabulary_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_vocabulary_proto_rawDesc), len(file_proto_vocabulary_proto_rawDesc)))
	})
	return file_proto_vocabulary_proto_rawDescData
}

var file_proto_vocabulary_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_vocabulary_proto_goTypes = []any{
	(*GetVocabulariesRequest)(nil),    // 0: vocabulary.GetVocabulariesRequest
	(*CreateVocabularyRequest)(nil),   // 1: vocabulary.CreateVocabularyRequest
	(*UpdateVocabularyRequest)(nil),   // 2: vocabulary.UpdateVocabularyRequest
	(*DeleteVocabularyRequest)(nil),   // 3: vocabulary.DeleteVocabularyRequest
	(*GetVocabularyByIdRequest)(nil),  // 4: vocabulary.GetVocabularyByIdRequest
	(*GetVocabularyStatsRequest)(nil), // 5: vocabulary.GetVocabularyStatsRequest
	(*GetVocabulariesResponse)(nil),   // 6: vocabulary.GetVocabulariesResponse
	(*VocabularyResponse)(nil),        // 7: vocabulary.VocabularyResponse
	(*DeleteVocabularyResponse)(nil),  // 8: vocabulary.DeleteVocabularyResponse
	(*VocabularyStatsResponse)(nil),   // 9: vocabulary.VocabularyStatsResponse
	(*Vocabulary)(nil),                // 10: vocabulary.Vocabulary
	(*DailyCount)(nil),                // 11: vocabulary.DailyCount
	nil,                               // 12: vocabulary.VocabularyStatsResponse.StatusCountsEntry
}
var file_proto_vocabulary_proto_depIdxs = []int32{
	10, // 0: vocabulary.GetVocabulariesResponse.vocabularies:type_name -> vocabulary.Vocabulary
	10, // 1: vocabulary.VocabularyResponse.vocabulary:type_name -> vocabulary.Vocabulary
	12, // 2: vocabulary.VocabularyStatsResponse.status_counts:type_name -> vocabulary.VocabularyStatsResponse.StatusCountsEntry
	11, // 3: vocabulary.VocabularyStatsResponse.daily_counts:type_name -> vocabulary.DailyCount
	0,  // 4: vocabulary.VocabularyService.GetVocabularies:input_type -> vocabulary.GetVocabulariesRequest
	1,  // 5: vocabulary.VocabularyService.CreateVocabulary:input_type -> vocabulary.CreateVocabularyRequest
	2,  // 6: vocabulary.VocabularyService.UpdateVocabulary:input_type -> vocabulary.UpdateVocabularyRequest
	3,  // 7: vocabulary.VocabularyService.DeleteVocabulary:input_type -> vocabulary.DeleteVocabularyRequest
	4,  // 8: vocabulary.VocabularyService.GetVocabularyById:input_type -> vocabulary.GetVocabularyByIdRequest
	5,  // 9: vocabulary.VocabularyService.GetVocabularyStats:input_type -> vocabulary.GetVocabularyStatsRequest
	6,  // 10: vocabulary.VocabularyService.GetVocabularies:output_type -> vocabulary.GetVocabulariesResponse
	7,  // 11: vocabulary.VocabularyService.CreateVocabulary:output_type -> vocabulary.VocabularyResponse
	7,  // 12: vocabulary.VocabularyService.UpdateVocabulary:output_type -> vocabulary.VocabularyResponse
	8,  // 13: vocabulary.VocabularyService.DeleteVocabulary:output_type -> vocabulary.DeleteVocabularyResponse
	7,  // 14: vocabulary.VocabularyService.GetVocabularyById:output_type -> vocabulary.VocabularyResponse
	9,  // 15: vocabulary.VocabularyService.GetVocabularyStats:output_type -> vocabulary.VocabularyStatsResponse
	10, // [10:16] is the sub-list for method output_type
	4,  // [4:10] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_vocabulary_proto_init() }
func file_proto_vocabulary_proto_init() {
	if File_proto_vocabulary_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_vocabulary_proto_rawDesc), len(file_proto_vocabulary_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_vocabulary_proto_goTypes,
		DependencyIndexes: file_proto_vocabulary_proto_depIdxs,
		MessageInfos:      file_proto_vocabulary_proto_msgTypes,
	}.Build()
	File_proto_vocabulary_proto = out.File
	file_proto_vocabulary_proto_goTypes = nil
	file_proto_vocabulary_proto_depIdxs = nil
}
